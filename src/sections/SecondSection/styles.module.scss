.secondSection{
    position: relative;
    padding-top: 56px;

    ul{
        //这里防止后面的section盖住ul（因为section正常是滚动到了视口的顶部），直接把ul也相对于第二部分设置为顶部固定
        position: absolute;
        top: 0;
        width: 100%;
        height: 56px;      
        //为什么要给高度而不是用padding去撑开呢，因为要给一个全局定位的方式
        //顶上去之后，下面的东西会浮上来，固定了高度可以用margin-top去避免这个东西被盖住的风险

        display: flex;
        align-items: center;    //对比justiify-content:between,*+*,前者以页宽为主，后者间隔以自定义为主
        justify-content: space-around;
        background-color: #F2683A;

        &.isFixed{
            //设置相对于整个视口的顶部固定
            position: fixed;
        }

        li{
            position: relative;
            color: white;
            list-style: none;

            .line{
                position: absolute;
                left: 50%;
                bottom: -8px;                          //往下移动一点
                transform: translateX(-50%);            //这样是css的居中操作
                width: 100%;
                height: 4px;
                background: rgb(243, 243, 79);
                opacity: 0;
                transition: opacity .3s;   //250ms或者300ms是比较好的
                
                &.visible{
                    opacity: 1;
                }
            }

            //相当于这一块是用一个全填充的span去制作下划线，然后用绝对定位附在li上面
        }
    }
    section{
        scroll-margin: 56px;    //相当于往上面顶56px，留出56px的空白，而且只在滚动的时候才会有
        padding: 16px;     //移动端的页面padding一般16px比较好

        h2{
            color: white;
        }
        img{
            margin-top: 16px;
            width: 100%;
            border-radius: 6px;     //一般4px和6px好
        }
    }
    .btmWrapper{
        position: fixed;         //反正一开始也看不见，直接fixed
        bottom: -1px;
        width: 100%;
        height: 64px;          //控制大小在外层容器处控制
        padding: 0 16px;
        display: flex;
        align-items: center;
        justify-content: space-between;
        background: linear-gradient(0deg, rgba(255,255,255,0.9) 46%, rgba(255,255,255,0) 100%);
        opacity: 0;     
        //这里会有问题，如果这个button是有链接的，用户看不见的时候可能会误点，
        //要设置一个层级关系，看不见的时候把这个东西的层级往后放,z-index: -1;
        //或者柔和一点，设置一个移动，先移动到y方向的下面64px，把整个东西往下隐藏，然后再往上移动
        //使得滑动的时候从下往上走，而不是从z方向突然出现
        transform: translateY(64px);
        transition: opacity .3s, transform .3s;


        &.visible{
            opacity: 1;
            transform: translateY(0);
        }

        img{
            width: 100px;
        }
        button{
            background-color: #fb7299;
            color: white;
            border-radius: 50px;
            border: none;
            padding: 8px 16px;    //button一般用这个值
        }
    }
}